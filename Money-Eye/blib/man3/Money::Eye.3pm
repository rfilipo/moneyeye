.\" Automatically generated by Pod::Man 4.07 (Pod::Simple 3.29)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
.    ds C`
.    ds C'
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is >0, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.\"
.\" Avoid warning from groff about undefined register 'F'.
.de IX
..
.if !\nF .nr F 0
.if \nF>0 \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    if !\nF==2 \{\
.        nr % 0
.        nr F 2
.    \}
.\}
.\" ========================================================================
.\"
.IX Title "Money::Eye 3pm"
.TH Money::Eye 3pm "2016-09-28" "perl v5.22.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Money::Eye \- Perl extension for blah blah blah
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  use Money::Eye;
\&  blah blah blah
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Stub documentation for Money::Eye, created by h2xs. It looks like the
author of the extension was negligent enough to leave the stub
unedited.
.PP
Blah blah blah.
.SS "\s-1EXPORT\s0"
.IX Subsection "EXPORT"
None by default.
.SS "Exportable constants"
.IX Subsection "Exportable constants"
.Vb 9
\&  Administrator
\&  Analyse
\&  Buy
\&  Credit
\&  Debit
\&  Guest
\&  Sell
\&  Trader
\&  User
.Ve
.SS "Exportable functions"
.IX Subsection "Exportable functions"
.Vb 5
\&  int analyse (char *json)
\&  double balance (char *period)
\&  int debit (double value)
\&  int deposit (double value)
\&  int trader (stock *s, double value, enum operation m)
.Ve
.ie n .SS "Object and class methods for ""trade""/""tradePtr"""
.el .SS "Object and class methods for \f(CWtrade\fP/\f(CWtradePtr\fP"
.IX Subsection "Object and class methods for trade/tradePtr"
The principal Perl representation of a C object of type \f(CW\*(C`trade\*(C'\fR is an
object of class \f(CW\*(C`tradePtr\*(C'\fR which is a reference to an integer
representation of a C pointer.  To create such an object, one may use
a combination
.PP
.Vb 2
\&  my $buffer = trade\->new();
\&  my $obj = $buffer\->_to_ptr();
.Ve
.PP
This exercises the following two methods, and an additional class
\&\f(CW\*(C`trade\*(C'\fR, the internal representation of which is a reference to a
packed string with the C structure.  Keep in mind that \f(CW$buffer\fR should
better survive longer than \f(CW$obj\fR.
.ie n .IP """$object_of_type_trade\->_to_ptr()""" 4
.el .IP "\f(CW$object_of_type_trade\->_to_ptr()\fR" 4
.IX Item "$object_of_type_trade->_to_ptr()"
Converts an object of type \f(CW\*(C`trade\*(C'\fR to an object of type \f(CW\*(C`tradePtr\*(C'\fR.
.ie n .IP """trade\->new()""" 4
.el .IP "\f(CWtrade\->new()\fR" 4
.IX Item "trade->new()"
Creates an empty object of type \f(CW\*(C`trade\*(C'\fR.  The corresponding packed
string is zeroed out.
.ie n .IP """movement(...)"", ""description(...)"", ""asset(...)"", ""value(...)""" 4
.el .IP "\f(CWmovement(...)\fR, \f(CWdescription(...)\fR, \f(CWasset(...)\fR, \f(CWvalue(...)\fR" 4
.IX Item "movement(...), description(...), asset(...), value(...)"
return the current value of the corresponding element if called
without additional arguments.  Set the element to the supplied value
(and return the new value) if called with an additional argument.
.Sp
Applicable to objects of type \f(CW\*(C`tradePtr\*(C'\fR.
.ie n .SS "Object and class methods for ""user""/""userPtr"""
.el .SS "Object and class methods for \f(CWuser\fP/\f(CWuserPtr\fP"
.IX Subsection "Object and class methods for user/userPtr"
The principal Perl representation of a C object of type \f(CW\*(C`user\*(C'\fR is an
object of class \f(CW\*(C`userPtr\*(C'\fR which is a reference to an integer
representation of a C pointer.  To create such an object, one may use
a combination
.PP
.Vb 2
\&  my $buffer = user\->new();
\&  my $obj = $buffer\->_to_ptr();
.Ve
.PP
This exercises the following two methods, and an additional class
\&\f(CW\*(C`user\*(C'\fR, the internal representation of which is a reference to a
packed string with the C structure.  Keep in mind that \f(CW$buffer\fR should
better survive longer than \f(CW$obj\fR.
.ie n .IP """$object_of_type_user\->_to_ptr()""" 4
.el .IP "\f(CW$object_of_type_user\->_to_ptr()\fR" 4
.IX Item "$object_of_type_user->_to_ptr()"
Converts an object of type \f(CW\*(C`user\*(C'\fR to an object of type \f(CW\*(C`userPtr\*(C'\fR.
.ie n .IP """user\->new()""" 4
.el .IP "\f(CWuser\->new()\fR" 4
.IX Item "user->new()"
Creates an empty object of type \f(CW\*(C`user\*(C'\fR.  The corresponding packed
string is zeroed out.
.ie n .IP """name(...)"", ""status(...)"", ""cash(...)"", ""receivable(...)"", ""due(...)""" 4
.el .IP "\f(CWname(...)\fR, \f(CWstatus(...)\fR, \f(CWcash(...)\fR, \f(CWreceivable(...)\fR, \f(CWdue(...)\fR" 4
.IX Item "name(...), status(...), cash(...), receivable(...), due(...)"
return the current value of the corresponding element if called
without additional arguments.  Set the element to the supplied value
(and return the new value) if called with an additional argument.
.Sp
Applicable to objects of type \f(CW\*(C`userPtr\*(C'\fR.
.ie n .SS "Object and class methods for ""stock""/""stockPtr"""
.el .SS "Object and class methods for \f(CWstock\fP/\f(CWstockPtr\fP"
.IX Subsection "Object and class methods for stock/stockPtr"
The principal Perl representation of a C object of type \f(CW\*(C`stock\*(C'\fR is an
object of class \f(CW\*(C`stockPtr\*(C'\fR which is a reference to an integer
representation of a C pointer.  To create such an object, one may use
a combination
.PP
.Vb 2
\&  my $buffer = stock\->new();
\&  my $obj = $buffer\->_to_ptr();
.Ve
.PP
This exercises the following two methods, and an additional class
\&\f(CW\*(C`stock\*(C'\fR, the internal representation of which is a reference to a
packed string with the C structure.  Keep in mind that \f(CW$buffer\fR should
better survive longer than \f(CW$obj\fR.
.ie n .IP """$object_of_type_stock\->_to_ptr()""" 4
.el .IP "\f(CW$object_of_type_stock\->_to_ptr()\fR" 4
.IX Item "$object_of_type_stock->_to_ptr()"
Converts an object of type \f(CW\*(C`stock\*(C'\fR to an object of type \f(CW\*(C`stockPtr\*(C'\fR.
.ie n .IP """stock\->new()""" 4
.el .IP "\f(CWstock\->new()\fR" 4
.IX Item "stock->new()"
Creates an empty object of type \f(CW\*(C`stock\*(C'\fR.  The corresponding packed
string is zeroed out.
.ie n .IP """name(...)"", ""value(...)"", ""owned(...)""" 4
.el .IP "\f(CWname(...)\fR, \f(CWvalue(...)\fR, \f(CWowned(...)\fR" 4
.IX Item "name(...), value(...), owned(...)"
return the current value of the corresponding element if called
without additional arguments.  Set the element to the supplied value
(and return the new value) if called with an additional argument.
.Sp
Applicable to objects of type \f(CW\*(C`stockPtr\*(C'\fR.
.SH "SEE ALSO"
.IX Header "SEE ALSO"
Mention other useful documentation such as the documentation of
related modules or operating system documentation (such as man pages
in \s-1UNIX\s0), or any relevant external documentation such as RFCs or
standards.
.PP
If you have a mailing list set up for your module, mention it here.
.PP
If you have a web site set up for your module, mention it here.
.SH "AUTHOR"
.IX Header "AUTHOR"
filipo, <filipo@>
.SH "COPYRIGHT AND LICENSE"
.IX Header "COPYRIGHT AND LICENSE"
Copyright (C) 2016 by filipo
.PP
This library is free software; you can redistribute it and/or modify
it under the same terms as Perl itself, either Perl version 5.22.1 or,
at your option, any later version of Perl 5 you may have available.
